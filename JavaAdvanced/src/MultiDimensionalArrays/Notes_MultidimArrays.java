package MultiDimensionalArrays;

import java.util.Arrays;
import java.util.Scanner;

public class Notes_MultidimArrays {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
//
//        //матрица = двуизмерен масив - масив с елементи масиви
//
////    int[] - масив от интове
////    [] - масив
////    int [][] - масив от масиви от интове
//
//        int[][] matrix = {{1, 2, 3}, {2, 3, 4}, {4, 5}, {3, 4, 5, 6, 7, 8}}; // дължината на масивите елементи може да е различна
//        // еднаква е само при матица (2-измерен)
//        // всеки от масивите елементи представлява един ред:
//        int[][] matrix1 = {
//                {1, 2, 3},
//                {2, 3, 4},
//                {4, 5},
//                {3, 4, 5, 6, 7, 8}};
//
//
//        // задължително при деклариране се оказва броя на редовете (броя на елементите-масиви),
//        // което е дължината на самия масив. Дължината на всеки отделен елемент-масив може и да не се посочва
//        int[][] matrix2 = new int[4][]; //масив с 4 реда (4 елемента-масиви)
//
//        //достъпване на елемент от някой от масивите-елементи (от ред)
//        System.out.println(matrix1[1][2]); //4
//
//        //достъпване на елемент-масив -> връща масив:
//        int[] arr2row = matrix1[1]; // вторият елемент от големия масив (т.е. вторият ред(масив-елемент))
//
//        //достъпване на всички елементи от масива:
//        for (int i = 0; i < matrix1.length; i++) {
//            int[] arr = matrix1[i]; //връща всеки отделен ред(масив)
//        }
//
//        //нов обикновен int[] се инициализира с деволтни стойности на интовете 0, защото за променливи и деф им ст е 0
//        //в паметта се заделят толкова клетки, колкото са елементите на масива и те са последователни
//        // и затова могат да се достъпят с индекси
//        //---- докато при мултид масиви:
//        //нов мултид масив се инициализира с дефолтни стойности на елемените-масиви null (защото са обекти)!!
//        // реално големия масив, с указана дължина, пази само индексираните адреси на масивите-елементи,
//        // като тези адреси могат да сочат към различно място в паметта и всеки масив-ел да се съхранява на разл място
//        int[][] matrix3 = new int[4][]; // това ще инициал един масив с 4 масива, които ще са null (неинициализирани)
//        int[][] matrix4 = new int[4][4];// това ще инициализара 1 масив с 4 масива, които ВЕЧЕ ще са инициализирани
//                                        // и ще имат по 4 инт , които ще са равни на 0
//
//        //-----
//        //сумиране на елементи от масив със стрийм
//        int sum1 = Arrays.stream(sc.nextLine().split(", "))
//                .mapToInt(Integer::parseInt)
//                .sum();
//
//        //сумиране на елементи от матрица
//
//        int rows = Integer.parseInt(sc.nextLine());
//        int total = 0;
//        for (int i = 0; i < rows; i++) {
//            //сумира елементите на всеки масив (или на всеки ред)
//            int sum = Arrays.stream(sc.nextLine().split(", "))
//                    .mapToInt(Integer::parseInt)
//                    .sum();
//            total += sum;
//        }
//
//        //--------
//
//        //попълване на матрица - с фор цикъл, защото можем да достъпваме всеки елемент по индекс
//        // четене на матрица - може и с фор цикъл, но може и с foreach - но при него не можем да променяме елементите , а само да ги четем

        //попълване на матрца
        int m_rows = Integer.parseInt(sc.nextLine()); // брой на масивите(редове) в матрицата
        int m_cols = Integer.parseInt(sc.nextLine()); // брой на колоните(елементите във всеки един масив)

        //създаваме празна матрица
        int[][] matrixA = new int[m_rows][m_cols];

        for (int row = 0; row < m_rows; row++) { //броя на повторенията на сканиране и попълване на матрицата
            //чете масива(реда) и го записва в пореден масив от матрицата
            matrixA[row] = Arrays.stream(sc.nextLine().split(", "))
                    .mapToInt(Integer::parseInt)
                    .toArray();
        }

        //обхождане на матрица и печатане (примерно). може и с foreach, защото тук само ги четем елементите, не ги променяме
        for (int[] arr : matrixA) { // за всеки масив/ред от матрицата
            for (int el: arr) { // за всеки елемент от всеки масив
                //do something (ex. print)
                System.out.print(el + " ");
            }
            System.out.println();

        }


    }

    // изнасяме четенето на масив от конзолата в метод (може да си ги подготвим за изпита:
    
    public static int[] readArray(Scanner sc){
        int [] arr = Arrays.stream(sc.nextLine().split("\\s+"))
                .mapToInt(Integer::parseInt)
                .toArray();
        return arr;
    }

    // изнасяме четенето на матрица от конзолата в метод
    public static int[][] readMatrix(Scanner sc){
        int[] dimensions = readArray(sc);
        int rows = dimensions[0];
        int cols = dimensions[1];

        int[][] matrix = new int[rows][cols];

        for (int r = 0; r < rows; r++) {
            matrix[r] = readArray(sc);
            }
        return matrix;
        }
    }


